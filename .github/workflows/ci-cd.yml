name: Complete CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: amdp-registry.skala-ai.com
  IMAGE_NAME: skala25a/sk-team-03-backend-springboot

jobs:
  test:
    runs-on: ubuntu-latest
    name: 테스트 및 코드 품질 검사

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test --continue

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: build/test-results/test/*.xml
          reporter: java-junit

      - name: Code coverage
        run: ./gradlew jacocoTestReport

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: build/reports/jacoco/test/jacocoTestReport.xml

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    name: 빌드 및 이미지 푸시

    permissions:
      contents: write  # GitOps를 위한 권한
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean bootJar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update Kubernetes manifests (GitOps)
        if: github.ref == 'refs/heads/main'
        run: |
          # 짧은 SHA 생성
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_TAG="main-${SHORT_SHA}"
          
          echo "Updating image tag to: ${IMAGE_TAG}"
          
          # deployment.yml 파일에서 이미지 태그 업데이트
          sed -i "s|image: ${REGISTRY}/${IMAGE_NAME}:.*|image: ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}|" k8s/deployment.yml
          
          # 변경사항 확인
          echo "Updated deployment.yml:"
          grep "image:" k8s/deployment.yml
          
          # Git 설정
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          
          # 변경사항이 있는지 확인
          if git diff --quiet k8s/deployment.yml; then
            echo "No changes to commit"
            exit 0
          fi
          
          # 변경사항 커밋 및 푸시
          git add k8s/deployment.yml
          git commit -m "🚀 Update backend image to ${IMAGE_TAG}"
          git push

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: 보안 스캔

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Create security summary
        if: always()
        run: |
          echo "## 🔒 보안 스캔 완료" >> $GITHUB_STEP_SUMMARY
          echo "- 이미지: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- 스캔 결과는 Security 탭에서 확인 가능합니다." >> $GITHUB_STEP_SUMMARY
name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  REGISTRY: amdp-registry.skala-ai.com
  IMAGE_NAME: skala25a/sk-team-03-backend

jobs:
  test:
    runs-on: ubuntu-latest
    name: 테스트

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Test Summary
        if: always()
        run: |
          echo "## 🧪 테스트 결과" >> $GITHUB_STEP_SUMMARY
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ 모든 테스트 통과!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 일부 테스트 실패" >> $GITHUB_STEP_SUMMARY
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    name: 빌드 및 배포

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build JAR
        run: ./gradlew clean bootJar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=1.0.0-${{ github.run_number }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update deployment file
        run: |
          # 새로운 이미지 태그
          NEW_TAG="1.0.0-${{ github.run_number }}"
          
          # deployment.yml 파일 업데이트 (실제 경로에 맞게 수정 필요)
          # 예: k8s/deployment.yml 또는 deployment.yml
          sed -i "s|image: amdp-registry.skala-ai.com/skala25a/sk-team-03-backend:.*|image: amdp-registry.skala-ai.com/skala25a/sk-team-03-backend:${NEW_TAG}|" k8s/deployment.yml
          
          # Git 설정
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 변경사항 확인 및 커밋
          if git diff --quiet k8s/deployment.yml; then
            echo "No changes to deployment.yml"
          else
            git add k8s/deployment.yml
            git commit -m "chore: update backend image to ${NEW_TAG}"
            git push
          fi

      - name: Build Summary
        if: always()
        run: |
          echo "## 🚀 빌드 및 배포 결과" >> $GITHUB_STEP_SUMMARY
          echo "- 이미지: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:1.0.0-${{ github.run_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Harbor 레지스트리: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          if [ ${{ job.status }} == 'success' ]; then
            echo "- ✅ Harbor 푸시 완료" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Deployment 파일 업데이트 완료" >> $GITHUB_STEP_SUMMARY
            echo "- 🔄 ArgoCD 자동 동기화 대기 중" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ 빌드/푸시 실패" >> $GITHUB_STEP_SUMMARY
          fi